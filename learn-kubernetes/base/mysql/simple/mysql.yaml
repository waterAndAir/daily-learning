apiVersion: v1
kind: ReplicationController  # 资源类型对象: 副本控制器 RC
metadata:
  name: mysql  # RC 的名称,全局唯一
spec:
  replicas: 1  # Pod 副本期待数量
  selector:
    app: mysql  # 具有这个标签的 Pod
  template:  # 根据次末班创建 Pod 的实例
    metadata:
      labels:  # labels 是用户可以任意指定的 key-val 键值对, 比如这里添加了一个 app: mysql 的label, 而 RC 的 selector 则选择了 app: mysql 这个标签
        app: mysql  # Pod 副本拥有的标签,对应 RC 的 Selector
    spec:
      containers:  # Pod 内容器的定义
        - name: mysql  # 容器的名称
          image: mysql  # 容器对应的 docker 镜像
          imagePullPolicy: IfNotPresent  # 优先让 kubernetes 用本地镜像
          resources:  # 资源限额
            requests:  # 最小申请量,系统必须满足的要求
              memory: "64Mi"
              cpu: "250m"  # cpu 限额以 m(千分之一) 为单位, 250m 表示 0.25 个 cpu
            limits:  # 最大允许使用的资源量,超过后,可能会被 kubernetes Kill 并重启
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 3306  # 容器暴露的端口号
          env:  # 注入到容器的环境变量
            - name: MYSQL_ROOT_PASSWORD
              value: "123456"

---

apiVersion: v1
kind: Service  # 表明是 Kubernetes Service
metadata:
  name: mysql  # Service 的全局唯一名称
spec:
  type: NodePort
  ports:
    - port: 3306  # Service 提供服务的端口号
      nodePort: 30001  # nodePort 的范围需要在 30000-32767
  selector:  # Service 选择具有 mysql 标签的 Pod
    app: mysql