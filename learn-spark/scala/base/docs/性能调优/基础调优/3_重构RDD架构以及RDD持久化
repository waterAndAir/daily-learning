### 说明  
默认情况下,多次对一个 RDD 执行算子,去获取不同的 RDD,都会对这个 RDD 以及之前的父 RDD, 全部重新计算一次.
这种情况,是绝对要避免的,一旦出现这种情况,就会导致性能急剧降低.

### RDD 架构重构与优化
尽量去复用 RDD, 差不多的 RDD,可以抽取称为一个共同的 RDD,共后面的 RDD 计算时,反复使用.

### 公共 RDD 一定要实现持久化
持久化,就是将 RDD 的数据缓存到内存中/磁盘中(BlockManager), 以后无论对这个 RDD 做多少次计算,那么都是直接
取这个 RDD 的持久化的数据比如从内存中或者磁盘中,直接提取一份数据

### 持久化,是可以进行序列化的
如果正常将数据持久化到内存中,可能会导致内存的占用过大,这样的话,也许,会导致 OOM 内存溢出
当纯内存无法支撑公共RDD数据完全存放的时候,就优先考虑,`使用序列化的方式再纯内存中存储`.将RDD每个 partition 的数据,
序列化成一个大的字节数据,就像一个对象,序列化后,大大减少内存的空间占用.
如果序列化纯内存的方式,还是会导致 OOM 内存溢出,就只能考虑磁盘的方式

### 为了数据的高可用性,而且内存充足,可以使用双副本机制,进行持久化
