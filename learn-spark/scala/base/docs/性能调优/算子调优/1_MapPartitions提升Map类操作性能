### 介绍
mapPartition 类似 map, 不同之处在于 map 算子, 一次就处理一个 partition 中的一条数据
mapPartitions 算子, 一次处理一个 partition 中所有的数据
### 优点
如果是普通的map,比如一个 partition 中有 1万 条数据;那么算子函数要执行 1万 次
但是,如果使用 MapPartitions 操作之后,一个 task 仅仅会执行一次函数,函数一次接收所有的partition数据,只要执行一次就可以了,性能比较高
### 缺点
如果是普通的 map 操作,一次 函数执行就处理一条数据,那么如果内存不够的情况下,比如处理 1千 条数据,那么这个时候内存不够了,就可以将已经处理完的 1千
条数据从内存里面垃圾回收掉,或者用其他方法腾出空间.
所以普通的 map 操作,通常不会导致内存的 OOM 异常

但是 MapPartitions 操作,对于大量数据来说,比如甚至一个 partition 有 100 万条数据,一次传入一个函数后,内存可能一下子就不够了,但是又没有办法
腾出内存空间来,可能就 OOM 内存溢出

### 适用场景
数据量不是特别大的时候,推荐使用 MapPartitions 替换 map 操作  

但是如果出现了 OOM , 就不能用了



